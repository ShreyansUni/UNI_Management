@model UNI_Management.ViewModel.TimeSheetViewModel

@{
    var demo = Model;
}
<div class="row p-2" id="filter">
    <div class="col-md-12">
        <div class="row pb-5">
            <div class="col-md-12">
                <button class="btn btn-primary" id="filterButton">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-funnel" viewBox="0 0 16 16">
                        <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5zm1 .5v1.308l4.372 4.858A.5.5 0 0 1 7 8.5v5.306l2-.666V8.5a.5.5 0 0 1 .128-.334L13.5 3.308V2z" />
                    </svg> Filters
                </button>
            </div>
        </div>
        <div class="card container-fluid" id="filterCard" style="display:none">
            <div class="row">
                <div class="col-md-3 my-2">
                    <div class="form-floating">
                        <input class="form-control gridFilterElements" id="txtFromDate" type="date">
                        <label for="txtFromDate">From Date</label>
                    </div>
                </div>
                <div class="col-md-3 my-2">
                    <div class="form-floating">
                        <input class="form-control gridFilterElements" id="txtToDate" type="date">
                        <label for="txtToDate">To Date</label>
                    </div>
                </div>
                <div class="col-md-3 my-2">
                    <div class="form-floating">
                        <select class="form-select"
                                id="employeeDropdown" asp-for="EmployeeId"
                                asp-items="@(new SelectList(ViewBag.EmployeeDropdown, "EmployeeId", "FirstName"))"
                                data-placeholder="Employee">
                            <option value="">Select Employee</option>
                        </select>
                    </div>
                </div>

                <div class="col-md-3 my-3">
                    <button class="btn btn-primary">Search</button>
                    <button class="btn btn-dark">Clear</button>
                </div>
            </div>   
        </div>
    </div>
</div>
<div class="container-fluid mt-4">
    <div class="row">
        <div class="col ">
            <div class=" my-3 d-flex justify-content-between align-items-center">
                <h1>TimeSheet</h1>
            </div>
            <div class="bg-white p-5 mb-3 rounded">
                <div class="row pb-3">
                    <div class="col-2"><h3>Avg.Sign In Time:</h3></div>
                    <div class="col-2"></div>
                    <div class="col-2"><h3>Avg.Sign Out Time:</h3></div>
                    <div class="col-2"></div>
                    <div class="col-2"><h3>Avg.Working Time:</h3></div>
                    <div class="col-2"></div>
                    @* <div class="col-2"><h3>Avg. Sign In Time:</h3></div>
                    <div class="col-2">
                        <p>@(Model.timeSheetDetails.AvgSignInTime?.ToString(@"hh\:mm\:ss tt") ?? "--:--")</p>
                    </div>

                    <div class="col-2"><h3>Avg. Sign Out Time:</h3></div>
                    <div class="col-2">
                        <p>@(Model.timeSheetDetails.AvgSignOutTime?.ToString(@"hh\:mm\:ss tt") ?? "--:--")</p>
                    </div>

                    <div class="col-2"><h3>Avg. Working Time:</h3></div>
                    <div class="col-2">
                        <p>@(Model.timeSheetDetails.AvgWorkingTime?.ToString(@"hh\:mm\:ss") ?? "--:--")</p>
                    </div> *@
                </div>

                <table class="table rounded text-center table-bordered border border-1 table-striped" id="example">
                    <thead class="table-active table-hover text-center">
                        <!--begin::Table row-->
                        <tr class="fw-bolder fs-7 text-uppercase gs-0">
                            <th class="min-w-80px">No.</th>
                            <th class="min-w-80px">Date</th>
                            <th class="min-w-125px">P/A</th>
                            <th class="min-w-125px">SignInTime</th>
                            <th class="min-w-125px">SignOutTime</th>
                            <th class="min-w-125px">WorkingHours</th>
                            <th class="min-w-125px">WorklogNotes</th>
                            @* <th class="text-center min-w-70px">Actions</th> *@
                        </tr>
                        <!--end::Table row-->
                    </thead>
                    <!--end::Table head-->
                    <!--begin::Table body-->
                    <tbody class="fw-bold text-gray-600">
                        @if (Model.timeSheetDetailsList != null && Model.timeSheetDetailsList.Any())
                        {
                            int i = 0;
                            @foreach (var data in Model.timeSheetDetailsList)
                            {
                                var workLogDetail = data.WorkLogDetails?.FirstOrDefault(); // Handle null WorkLogDetails
                                var attandenceDetail = data.AttandenceDetails?.FirstOrDefault(); // Handle null AttendanceDetails

                                <tr>
                                    <td class="min-w-80px">@(++i)</td>
                                    <td class="min-w-80px">
                                        @(attandenceDetail?.CreatedDate.HasValue == true ? attandenceDetail.CreatedDate.Value.ToString("dd-MM-yyyy") : "N/A")
                                    </td>
                                    <td class="min-w-125px">
                                        @{
                                            var (badgeClass, statusText) = attandenceDetail?.Status switch
                                            {
                                                1 => ("badge bg-success", "Present"),
                                                2 => ("badge bg-danger", "Absent"),
                                                3 => ("badge bg-warning text-dark", "Half Leave"),
                                                _ => ("badge bg-secondary", "Unknown")
                                            };
                                        }
                                        <span class="@badgeClass">@statusText</span>
                                    </td>

                                    <td class="min-w-125px">
                                        @(attandenceDetail?.CreatedDate.HasValue == true ? attandenceDetail.CreatedDate.Value.ToString("hh:mm tt") : "-")
                                    </td>
                                    <td class="min-w-125px">
                                        @(workLogDetail?.SignOutTime.HasValue == true ? workLogDetail.SignOutTime.Value.ToString("hh:mm tt") : "-")
                                    </td>

                                    <td class="min-w-125px">
                                        @* @{
                                            if (attandenceDetail?.CreatedDate.HasValue == true && workLogDetail?.SignOutTime.HasValue == true)
                                            {
                                                var signInTime = attandenceDetail.CreatedDate.Value;
                                                var signOutTime = workLogDetail.SignOutTime.Value;
                                                // var breakHours = workLogDetail.BreakHours.HasValue
                                                // ? workLogDetail.BreakHours.Value.ToTimeSpan()
                                                // : TimeSpan.Zero;

                                                // Ensure SignOutTime is after SignInTime
                                                if (signOutTime > signInTime)
                                                {
                                                    var workingDuration = signOutTime - signInTime;
                                                    @workingDuration.ToString(@"hh\:mm\:ss")
                                                    // if (workingDuration > TimeSpan.Zero)
                                                    // {
                                                    //     @workingDuration.ToString(@"hh\:mm\:ss")
                                                    // }
                                                    // else
                                                    // {
                                                    //     @:Invalid Duration
                                                    // }
                                                }
                                                else
                                                {
                                                    @:Invalid Time
                                                }
                                            }
                                            else
                                            {
                                                @:N/A
                                            }
                                        } *@
                                        @{
                                            string badgesClass;
                                            string workingDurationText;

                                            if (attandenceDetail?.CreatedDate.HasValue == true && workLogDetail?.SignOutTime.HasValue == true)
                                            {
                                                var signInTime = attandenceDetail.CreatedDate.Value;
                                                var signOutTime = workLogDetail.SignOutTime.Value;

                                                if (signOutTime > signInTime)
                                                {
                                                    var workingDuration = signOutTime - signInTime;
                                                    workingDurationText = workingDuration.ToString(@"hh\:mm\:ss");

                                                    if (workingDuration >= TimeSpan.FromHours(8) + TimeSpan.FromMinutes(30))
                                                    {
                                                        badgesClass = "badge bg-success"; // 8h 30m or above (Green)
                                                    }
                                                    else if (workingDuration >= TimeSpan.FromHours(6) && workingDuration < TimeSpan.FromHours(8) + TimeSpan.FromMinutes(30))
                                                    {
                                                        badgesClass = "badge bg-warning text-dark"; // Between 6h - 8h 30m (Yellow)
                                                    }
                                                    else
                                                    {
                                                        badgesClass = "badge bg-danger"; // Less than 6h (Red)
                                                    }
                                                }
                                                else
                                                {
                                                    workingDurationText = "Invalid Time";
                                                    badgesClass = "badge bg-secondary";
                                                }
                                            }
                                            else
                                            {
                                                workingDurationText = "N/A";
                                                badgesClass = "badge bg-secondary"; // No data available (Gray)
                                            }
                                        }
                                        <span class="@badgesClass">@workingDurationText</span>
                                    </td>

                                    <td style="max-width: 200px;">
                                        @(string.IsNullOrEmpty(workLogDetail?.Note) ? "N/A" : workLogDetail.Note)
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="8" class="text-center">No data available</td>
                            </tr>
                        }
                    </tbody>
                    <!--end::Table body-->
                </table>
            </div>
        </div>
    </div>
</div>
@section BodyEndScript {
    <script>
        document.getElementById('filterButton').addEventListener('click', function () {
            var filterCard = document.getElementById('filterCard');
            if (filterCard.style.display === 'none' || filterCard.style.display === '') {
                filterCard.style.display = 'block';
            } else {
                filterCard.style.display = 'none';
            }
        });
    </script>
} 

